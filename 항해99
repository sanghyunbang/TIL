제목: 99클럽 코테 스터디 1일차 TIL + 오늘의 학습 키워드

#99클럽 #코딩테스트준비 #개발자취업 #항해99 #TIL

1) 비기너_1
##리스트 관련 메소드
1. list()
2. .count()
3. .upper.count()
4. == : True / False 관련 연산자

2) 미들러_1

1. math관련 메소드
2. 이진 탐색 mid +1 -1씩 움직여나감
3. 실수: 분모 분자 동시 증가 / 기준점 X로 잡으면 안됨.
X, Y = map(int, input().split())

(코드 예시)
mid_right = X
mid_left = 0

# 현재 승률 계산
initial_ratio = int(Y * 100 / X)

# X와 Y가 같으면 승률 변화가 없으므로 -1을 출력
if X == Y:
    print(-1)
else:
    while mid_left < mid_right:
        mid = (mid_right + mid_left) // 2
        
        # 새로운 승률 계산
        new_ratio = int((Y + mid) * 100 / (X + mid))
        
        if new_ratio == initial_ratio:
            # 승률 변화가 없는 경우 mid를 증가시키기 위해 left를 이동
            mid_left = mid + 1
        else:
            # 승률 변화가 발생하면 right를 조정하여 탐색 범위를 줄임
            mid_right = mid
            
    # 최종적으로 승률이 변화하는 지점의 mid 출력
    print(mid_right)


제목: 99클럽 코테 스터디 2일차 TIL + 오늘의 학습 키워드

# 비기너

배운내용 
1. slice
2. str <-> int
3. 잘라서 슬라이스 할 때 , [i, i+길이] 뒤에 i 안빼먹도록 주의!
4. list 추가하는 법 : list.append(값)


제목: 99클럽 코테 스터디 3일차 TIL + 오늘의 학습 키워드

# 비기너

배운 내용
1. deque
2. while
3. leftpop()

제목: 99클럽 코테 스터디 5일차 TIL + 오늘의 학습 키워드


배운내용
1. 해시
2. 인풋 int.input() 우선 해서 정수 추추하고 다시 input().split()으로 리스트 만들기

morse_code = {
  '.-': 'A',
  '-...': 'B',
  '-.-.': 'C',
  '-..': 'D',
  '.': 'E',
  '..-.': 'F',
  '--.': 'G',
  '....': 'H',
  '..': 'I',
  '.---': 'J',
  '-.-': 'K',
  '.-..': 'L',
  '--': 'M',
  '-.': 'N',
  '---': 'O',
  '.--.': 'P',
  '--.-': 'Q',
  '.-.': 'R',
  '...': 'S',
  '-': 'T',
  '..-': 'U',
  '...-': 'V',
  '.--': 'W',
  '-..-': 'X',
  '-.--': 'Y',
  '--..': 'Z',
  '.----': '1',
  '..---': '2',
  '...--': '3',
  '....-': '4',
  '.....': '5',
  '-....': '6',
  '--...': '7',
  '---..': '8',
  '----.': '9',
  '-----': '0',
  '--..--': ',',
  '.-.-.-': '.',
  '..--..': '?',
  '---...': ':',
  '-....-': '-',
  '.--.-.': '@',
}

N = int(input())
morse = input().split()

for code in morse:
    print(morse_code[code], end="")

제목: 99클럽 코테 스터디 5일차 TIL + 오늘의 학습 키워드

1) 내코드 1
data = list(input().split())
number = int(data[0])

STRAWBERRY_NUM = 0
BANANA_NUM = 0
LIME_NUM = 0
PLUM_NUM = 0

for i in range(number):
    if data[2*i+1] == "STRAWBERRY":
        STRAWBERRY_NUM += int(data[2*i+2])

    elif data[2*i+1] == "BANANA":
        BANANA_NUM += int(data[2*i+2])

    elif data[2*i+1] == "LIME":
        LIME_NUM += int(data[2*i+2])

    elif data[2*i+1] == "PLUM":
        PLUM_NUM += int(data[2*i+2])

if STRAWBERRY_NUM or BANANA_NUM or LIME_NUM or PLUM_NUM == 5:
    print("YES")

else:
    print("NO")

2) 코드 2

import sys
input = sys.stdin.read

# 모든 입력을 한 번에 받아서 줄 단위로 분리
data = input().splitlines()
number = int(data[0])  # 첫 번째 줄의 카드 개수

# 과일 개수 변수 초기화
STRAWBERRY_NUM = 0
BANANA_NUM = 0
LIME_NUM = 0
PLUM_NUM = 0

# 카드 수만큼 반복하며 각 줄의 과일 정보 처리
for i in range(1, number + 1):
    fruit, count = data[i].split()  # 과일 이름과 개수를 분리
    count = int(count)

    # 과일 이름에 따라 개수 누적
    if fruit == "STRAWBERRY":
        STRAWBERRY_NUM += count
    elif fruit == "BANANA":
        BANANA_NUM += count
    elif fruit == "LIME":
        LIME_NUM += count
    elif fruit == "PLUM":
        PLUM_NUM += count

# 정확히 5인 과일이 하나라도 있는 경우 'YES' 출력
if STRAWBERRY_NUM == 5 or BANANA_NUM == 5 or LIME_NUM == 5 or PLUM_NUM == 5:
    print("YES")
else:
    print("NO")


제목: 99클럽 코테 스터디 8일차 TIL + 오늘의 학습 키워드


1) 맞춘 코드
# 첫 번째 줄에 주의 개수 N
N = int(input())

# 각 교대 시간별 근무 시간을 정의
shifts = [4, 6, 4, 10]

# 근무자별 누적 근무 시간을 저장할 딕셔너리
work_time = {}

# 각 주차에 대해 반복
for _ in range(N):
    # 각 교대 시간대에 대해 반복
    for shift_idx in range(4):
        # 현재 교대 근무자의 이름을 입력받음
        workers = input().split()
        
        # 각 근무자를 순회하며 근무 시간 누적
        for worker in workers:
            if worker != '-':  # 빈 값이 아닌 경우에만 처리
                if worker not in work_time:
                    work_time[worker] = 0  # 초기화
                work_time[worker] += shifts[shift_idx]  # 근무 시간 누적

# 근무자들의 총 근무 시간 목록 추출
times = list(work_time.values())

# 공평한지 여부 확인 및 출력
if len(times) == 0:
    print("Yes")
else:
    if max(times) - min(times) <= 12:
        print("Yes")
    else:
        print("No")

2) 틀린코드
import sys

# 여러 줄 입력을 받을 때 사용
data = sys.stdin.read().splitlines()

# 각 줄을 공백으로 나눠서 행 리스트로 변환
rows = [line.split() for line in data[1:]]

unique_names = set()

for i in range(int((data[0]))*4):
  unique_names = unique_names | set(rows[i])

score_hash = {element : 0 for element in unique_names }

for i in range(7):
  for j in range(int(data[0])*4):
    if j % 4 == 0 or j % 4 == 2:
        if rows[j][i] in score_hash:
            item = rows[j][i]
            score_hash[item] = score_hash[item] + 4
    
    elif j % 4 == 1:
        if rows[j][i] in score_hash:
            item = rows[j][i]
            score_hash[item] = score_hash[item] + 6

    elif j % 4 == 3:
        if rows[j][i] in score_hash:
            item = rows[j][i]
            score_hash[item] = score_hash[item] + 10

del score_hash['-']

if max(score_hash.values()) - min(score_hash.values()) <= 12:
  print("Yes")

else:
  print("No")

이유: 예외사항
특정 주의 모든 시간대가 비어있는 경우 틀린 코드는 value error


##### 14일째######

****주의점 : input 형식에 따라서 시간이 초과하는 경우가 발생

import sys
from collections import deque

input = sys.stdin.read  # sys.stdin.read로 한 번에 입력을 받음
deq = deque()

# 입력을 한꺼번에 받아서 줄 단위로 분리
commands = input().splitlines()
N = int(commands[0])  # 첫 번째 줄은 명령 개수

result = []  # 출력을 모아둘 리스트

for i in range(1, N + 1):  # 두 번째 줄부터 명령 실행
    order = commands[i].split()

    if order[0] == "push":
        deq.append(int(order[1]))

    elif order[0] == "pop":
        result.append(deq.popleft() if deq else -1)

    elif order[0] == "empty":
        result.append(1 if not deq else 0)

    elif order[0] == "size":
        result.append(len(deq))

    elif order[0] == "front":
        result.append(deq[0] if deq else -1)

    elif order[0] == "back":
        result.append(deq[-1] if deq else -1)

# 최종적으로 한 번에 출력
sys.stdout.write("\n".join(map(str, result)) + "\n")

**** 시간 초과 코드 예시

from collections import deque

# 첫 번째 줄의 명령 개수 N

N = int(input())

# 각 행별 명령 수행
deq = deque()


for _ in range(N):

  order = input().split()

  if order[0] == "push":
    deq.append(int(order[1]))


  elif order[0] == "pop":
    if len(deq) == 0:
      print(-1)
      
    else:
      print(int(deq.popleft()))

  elif order[0] == "empty":
    if len(deq) == 0:
      print(1)

    else:
      print(0)

  elif order[0] == "size":
    print(len(deq))

  elif order[0] == "front":
    if len(deq) == 0:
      print(-1)

    else:
      print(int(deq[0]))


  elif order[0] == "back" :
    if len(deq) == 0:
      print(-1)

    else:
      print(int(deq[-1]))

